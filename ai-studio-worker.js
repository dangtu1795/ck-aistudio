const { Builder, By, until, Key } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const cheerio = require('cheerio');
const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const os = require('os');

class AiStudioWorker {
    constructor() {
        this.driver = null;
        this.wait = null;
        this.profilePath = path.join(os.tmpdir(), 'TLCK');
        this.tempProfilePath = null; // Store the temp profile path for cleanup
        this.initializeDriver();
    }

    async initializeDriver() {
        try {
            await fs.ensureDir(this.profilePath);
            const options = this.createChromeOptions();
            this.driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();
            this.wait = this.driver.wait.bind(this.driver);
            console.log('‚úÖ Chrome driver initialized');
        } catch (error) {
            console.error('‚ùå Failed to initialize Chrome driver:', error);
        }
    }

    createChromeOptions() {
        // Use consistent profile directory - reuse the same profile each time
        const tempProfile = this.profilePath; // Use the existing profilePath from constructor

        // Store the temp profile path for cleanup
        this.tempProfilePath = tempProfile;

        fs.ensureDirSync(tempProfile);

        const options = new chrome.Options();
        options.addArguments('--disable-blink-features=AutomationControlled');
        options.addArguments(`--user-data-dir=${tempProfile}`);
        options.addArguments('--no-sandbox');
        options.addArguments('--disable-dev-shm-usage');
        options.addArguments('--disable-gpu');
        options.addArguments('--disable-features=VizDisplayCompositor');
        options.addArguments('--remote-debugging-port=0');
        // Suppress specific error messages
        options.addArguments('--disable-logging');
        options.addArguments('--log-level=3');
        options.addArguments('--silent');
        options.addArguments('--disable-background-timer-throttling');
        options.addArguments('--disable-backgrounding-occluded-windows');
        options.addArguments('--disable-renderer-backgrounding');
        options.addArguments('--disable-features=TranslateUI');
        options.addArguments('--disable-ipc-flooding-protection');
        options.addArguments('--disable-extensions');
        options.addArguments('--disable-component-extensions-with-background-pages');
        options.addArguments('--disable-default-apps');
        options.addArguments('--disable-sync');
        options.addArguments('--disable-background-networking');
        options.addArguments('--disable-gcm-provider');
        options.addArguments('--disable-on-device-model');
        options.setPageLoadStrategy('eager');

        return options;
    }

    async checkChromeStatus() {
        try {
            if (!this.driver) return false;
            await this.driver.getTitle();
            return true;
        } catch (error) {
            return false;
        }
    }

    async notifyError(callbackUrl, requestId, errorMessage = '') {
        try {
            const errorPayload = {
                request_id: requestId,
                status: 'error',
                result_data: errorMessage,
            };
            await axios.post(callbackUrl, errorPayload);
            console.log(`üì° ƒê√£ g·ª≠i l·ªói v·ªÅ server: ${errorMessage}`);
        } catch (error) {
            console.log(`‚ö†Ô∏è G·ª≠i callback th·∫•t b·∫°i: ${error.message}`);
        }
    }

    extractJsonFromCodeBlock(htmlContent, prompt, requestId, callbackUrl, temperature, type) {
        try {
            const $ = cheerio.load(htmlContent);
            const codeBlock = $('code').first();

            if (codeBlock.length === 0) {
                throw new Error('‚ùå Kh√¥ng t√¨m th·∫•y th·∫ª <code> trong HTML');
            }

            let cleanText = codeBlock.text();

            // Find JSON using regex
            const match = cleanText.match(/\{[\s\S]*\}/);
            if (!match) {
                throw new Error('‚ùå Kh√¥ng t√¨m th·∫•y JSON trong n·ªôi dung ƒë√£ l√†m s·∫°ch');
            }

            const jsonStr = match[0];
            JSON.parse(jsonStr); // Validate JSON

            return jsonStr;
        } catch (error) {
            console.log(`‚ùå L·ªói extract JSON t·ª´ HTML: ${error.message}`);
            if (callbackUrl && requestId) {
                this.safeProcessPrompt(prompt, requestId, callbackUrl, temperature, type);
            }
            return null;
        }
    }

    async setTextareaValueByJs(fullPrompt) {
        const script = `
            const textarea = document.querySelector("textarea");
            const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
            nativeInputValueSetter.call(textarea, arguments[0]);
            textarea.dispatchEvent(new Event('input', { bubbles: true }));
        `;
        await this.driver.executeScript(script, fullPrompt);
        console.log('‚úÖ ƒê√£ set gi√° tr·ªã prompt b·∫±ng JavaScript');
    }

    async setTemperatureValue(temperature) {
        try {
            // Th·ª≠ nhi·ªÅu selector kh√°c nhau ƒë·ªÉ t√¨m input temperature
            const selectors = [
                'input[ms-input][type="number"]',  // Selector m·ªõi
                'input.v3-font-label[type="number"]',  // Selector m·ªõi v·ªõi class
                'input[type="number"][min="0"][max="2"]',  // Selector theo attributes
                'input.manual-input[type="number"]',  // Selector c≈©
                'input[type="number"]'  // Fallback selector
            ];

            let tempInput = null;

            for (const selector of selectors) {
                try {
                    const inputs = await this.driver.findElements(By.css(selector));
                    if (inputs.length > 0) {
                        // T√¨m input c√≥ th·ªÉ edit ƒë∆∞·ª£c (visible v√† enabled)
                        for (const input of inputs) {
                            if (await input.isDisplayed() && await input.isEnabled()) {
                                tempInput = input;
                                console.log(`‚úÖ T√¨m th·∫•y temperature input v·ªõi selector: ${selector}`);
                                break;
                            }
                        }
                        if (tempInput) break;
                    }
                } catch (selectorError) {
                    // Continue to next selector
                    continue;
                }
            }

            if (!tempInput) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y temperature input v·ªõi t·∫•t c·∫£ selector.');
                return;
            }

            // Scroll ƒë·∫øn input ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ visible
            await this.driver.executeScript("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", tempInput);
            await this.sleep(300);

            // Clear input tr∆∞·ªõc khi set gi√° tr·ªã m·ªõi
            await tempInput.clear();
            await this.sleep(100);

            // Set gi√° tr·ªã b·∫±ng JavaScript ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
            await this.driver.executeScript(
                `
                const input = arguments[0];
                const value = arguments[1];
                
                // Clear existing value
                input.value = '';
                input.focus();
                
                // Set new value using native setter
                const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;
                nativeInputValueSetter.call(input, value.toString());
                
                // Trigger events
                input.dispatchEvent(new Event('input', { bubbles: true }));
                input.dispatchEvent(new Event('change', { bubbles: true }));
                input.dispatchEvent(new Event('blur', { bubbles: true }));
            `,
                tempInput,
                parseFloat(temperature),
            );

            // Verify the value was set correctly
            const actualValue = await tempInput.getAttribute('value');
            console.log(`‚úÖ ƒê√£ set temperature = ${temperature} (verified: ${actualValue})`);

        } catch (error) {
            console.log(`‚ö†Ô∏è Kh√¥ng set ƒë∆∞·ª£c temperature: ${error.message}`);

            // Debug: Log page source for temperature input debugging
            try {
                const pageSource = await this.driver.getPageSource();
                const tempInputMatch = pageSource.match(/<input[^>]*type="number"[^>]*>/gi);
                if (tempInputMatch) {
                    console.log('üîç Found temperature inputs in page:', tempInputMatch);
                }
            } catch (debugError) {
                console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ debug temperature input: ${debugError.message}`);
            }
        }
    }

    async clickRunButton(temperature, maxRetries = 3) {
        for (let attempt = 0; attempt < maxRetries; attempt++) {
            try {
                console.log(`üîÑ Th·ª≠ click n√∫t Run - l·∫ßn ${attempt + 1}`);
                console.log('üîç URL hi·ªán t·∫°i:', await this.driver.getCurrentUrl());

                // await this.driver.wait(until.elementLocated(By.className('mdc-slider__input')), 10000);
                await this.setTemperatureValue(temperature);

                // const runButton = await this.driver.wait(until.elementIsEnabled(By.className('run-button-content')), 10000);

                // await runButton.click();
                // click button has mattooltipclass="run-button-tooltip"
                const runButton = await this.driver.wait(
                    until.elementLocated(By.css('button[mattooltipclass="run-button-tooltip"]')),
                    10000,
                );
                await runButton.click();
                console.log('‚úÖ ƒê√£ click n√∫t Run th√†nh c√¥ng');
                return true;
            } catch (error) {
                console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ho·∫∑c click ƒë∆∞·ª£c n√∫t Run (timeout)`);
                try {
                    const pageSource = await this.driver.getPageSource();
                    await fs.writeFile('run_button_debug.html', pageSource, 'utf8');
                    await this.driver.takeScreenshot().then((data) => {
                        fs.writeFileSync('run_button_debug.png', data, 'base64');
                    });
                } catch (debugError) {
                    console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u debug: ${debugError.message}`);
                }
                await this.sleep(2000);
            }
        }
        return false;
    }

    async waitStopButtonDisappear(timeout = 180000) {
        console.log('‚è≥ ƒê·ª£i n√∫t Stop bi·∫øn m·∫•t...');
        const start = Date.now();

        while (Date.now() - start < timeout) {
            try {
                const stopButton = await this.driver.findElement(By.xpath('//button[.//span[text()="Stop"]]'));

                if (!(await stopButton.isDisplayed())) {
                    console.log('‚úÖ N√∫t Stop ƒë√£ bi·∫øn m·∫•t');
                    return;
                }
            } catch (error) {
                console.log('‚úÖ Kh√¥ng c√≤n th·∫•y n√∫t Stop (DOM removed)');
                return;
            }
            await this.sleep(1000);
        }
        throw new Error('‚ùå Qu√° th·ªùi gian ƒë·ª£i Stop bi·∫øn m·∫•t');
    }

    extractBraceBlocks(text) {
        const result = [];
        const stack = [];
        let startIdx = null;

        for (let i = 0; i < text.length; i++) {
            const char = text[i];
            if (char === '{') {
                if (stack.length === 0) {
                    startIdx = i;
                }
                stack.push('{');
            } else if (char === '}') {
                if (stack.length > 0) {
                    stack.pop();
                    if (stack.length === 0 && startIdx !== null) {
                        result.push(text.substring(startIdx, i + 1));
                        startIdx = null;
                    }
                }
            }
        }
        return result;
    }

    async clickDownloadButton() {
        try {
            // Th·ª≠ nhi·ªÅu selector kh√°c nhau ƒë·ªÉ t√¨m n√∫t Download
            const selectors = [
                'button[mattooltip="Download"]',
                'button[iconname="download"]',
                '.actions-container button[mattooltip="Download"]',
                '.actions-container button[iconname="download"]',
                'button .material-symbols-outlined:contains("download")',
                'button span:contains("download")'
            ];

            let downloadButton = null;

            for (const selector of selectors) {
                try {
                    const buttons = await this.driver.findElements(By.css(selector));
                    if (buttons.length > 0) {
                        // T√¨m button c√≥ th·ªÉ click ƒë∆∞·ª£c (visible v√† enabled)
                        for (const button of buttons) {
                            if (await button.isDisplayed() && await button.isEnabled()) {
                                downloadButton = button;
                                console.log(`‚úÖ T√¨m th·∫•y n√∫t Download v·ªõi selector: ${selector}`);
                                break;
                            }
                        }
                        if (downloadButton) break;
                    }
                } catch (selectorError) {
                    // Continue to next selector
                    continue;
                }
            }

            if (!downloadButton) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Download.');
                return;
            }

            // Scroll ƒë·∫øn button ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ visible
            await this.driver.executeScript("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", downloadButton);
            await this.sleep(500);

            // Th·ª≠ click b·∫±ng JavaScript tr∆∞·ªõc
            try {
                await this.driver.executeScript("arguments[0].click();", downloadButton);
                console.log('‚úÖ ƒê√£ click n√∫t Download (JavaScript).');
            } catch (jsError) {
                // Fallback to normal click
                await downloadButton.click();
                console.log('‚úÖ ƒê√£ click n√∫t Download (click th∆∞·ªùng).');
            }
        } catch (error) {
            console.log('‚ùå L·ªói khi b·∫•m n√∫t Download:', error.message);
            throw error;
        }
    }

    async clickCopyToClipboard() {
        try {
            // Th·ª≠ nhi·ªÅu selector kh√°c nhau ƒë·ªÉ t√¨m n√∫t Copy
            const selectors = [
                'button[mattooltip="Copy to clipboard"]',
                'button[iconname="content_copy"]',
                '.actions-container button[mattooltip="Copy to clipboard"]',
                '.actions-container button[iconname="content_copy"]',
                'button .material-symbols-outlined:contains("content_copy")',
                'button span:contains("content_copy")'
            ];

            let copyButton = null;

            for (const selector of selectors) {
                try {
                    const buttons = await this.driver.findElements(By.css(selector));
                    if (buttons.length > 0) {
                        // T√¨m button c√≥ th·ªÉ click ƒë∆∞·ª£c (visible v√† enabled)
                        for (const button of buttons) {
                            if (await button.isDisplayed() && await button.isEnabled()) {
                                copyButton = button;
                                console.log(`‚úÖ T√¨m th·∫•y n√∫t Copy v·ªõi selector: ${selector}`);
                                break;
                            }
                        }
                        if (copyButton) break;
                    }
                } catch (selectorError) {
                    // Continue to next selector
                    continue;
                }
            }

            if (!copyButton) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Copy v·ªõi t·∫•t c·∫£ selector.');
                return;
            }

            // Scroll ƒë·∫øn button ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ visible
            await this.driver.executeScript("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", copyButton);
            await this.sleep(500);

            // Th·ª≠ click b·∫±ng nhi·ªÅu c√°ch kh√°c nhau
            let clickSuccess = false;

            // C√°ch 1: Click b√¨nh th∆∞·ªùng
            try {
                await copyButton.click();
                clickSuccess = true;
                console.log('‚úÖ ƒê√£ click n√∫t Copy (click th∆∞·ªùng).');
            } catch (clickError) {
                console.log('‚ö†Ô∏è Click th∆∞·ªùng th·∫•t b·∫°i, th·ª≠ JavaScript click...');

                // C√°ch 2: Click b·∫±ng JavaScript
                try {
                    await this.driver.executeScript("arguments[0].click();", copyButton);
                    clickSuccess = true;
                    console.log('‚úÖ ƒê√£ click n√∫t Copy (JavaScript click).');
                } catch (jsError) {
                    console.log('‚ö†Ô∏è JavaScript click th·∫•t b·∫°i, th·ª≠ Actions...');

                    // C√°ch 3: S·ª≠ d·ª•ng Actions ƒë·ªÉ move v√† click
                    try {
                        const actions = this.driver.actions();
                        await actions.move({ origin: copyButton }).click().perform();
                        clickSuccess = true;
                        console.log('‚úÖ ƒê√£ click n√∫t Copy (Actions).');
                    } catch (actionsError) {
                        console.log('‚ùå T·∫•t c·∫£ ph∆∞∆°ng th·ª©c click ƒë·ªÅu th·∫•t b·∫°i');
                        console.log('Click error:', clickError.message);
                        console.log('JS error:', jsError.message);
                        console.log('Actions error:', actionsError.message);
                    }
                }
            }

            if (!clickSuccess) {
                throw new Error('Kh√¥ng th·ªÉ click n√∫t Copy sau khi th·ª≠ t·∫•t c·∫£ ph∆∞∆°ng th·ª©c');
            }

        } catch (error) {
            console.log('‚ùå L·ªói khi b·∫•m n√∫t Copy:', error.message);
            throw error; // Re-throw ƒë·ªÉ trigger fallback trong processPrompt
        }
    }

    async readLatestTxtFileAndDelete() {
        const downloadDir = path.join(os.homedir(), 'Downloads');
        const files = await fs.readdir(downloadDir);
        const txtFiles = files.filter((f) => f.endsWith('.txt'));

        if (txtFiles.length === 0) {
            throw new Error('Kh√¥ng t√¨m th·∫•y file .txt n√†o trong th∆∞ m·ª•c t·∫£i xu·ªëng.');
        }

        // Get latest file by modification time
        const fileStats = await Promise.all(
            txtFiles.map(async (file) => ({
                name: file,
                stats: await fs.stat(path.join(downloadDir, file)),
            })),
        );

        fileStats.sort((a, b) => b.stats.mtime - a.stats.mtime);
        const latestFile = path.join(downloadDir, fileStats[0].name);

        // Wait for file to be completely downloaded
        for (let i = 0; i < 10; i++) {
            try {
                const content = await fs.readFile(latestFile, 'utf8');
                return content;
            } catch (error) {
                await this.sleep(1000);
            }
        }
        throw new Error(`Kh√¥ng th·ªÉ m·ªü file ${latestFile}`);
    }

    async processPrompt(prompt, requestId, callbackUrl, temperature, type) {
        try {
            await this.driver.get('https://aistudio.google.com/prompts/new_chat');

            const promptBox = await this.driver.wait(until.elementLocated(By.css('textarea')), 10000);

            await this.setTextareaValueByJs(prompt);
            await this.sleep(1000);

            if (!(await this.clickRunButton(temperature))) {
                throw new Error('Kh√¥ng th·ªÉ click n√∫t Run sau nhi·ªÅu l·∫ßn th·ª≠.');
            }

            console.log('üöÄ AI ƒë√£ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω');
            await this.driver.wait(until.elementLocated(By.xpath('//button[.//span[text()="Stop"]]')), 30000);

            await this.waitStopButtonDisappear();

            // Check for errors
            const errorElements = await this.driver.findElements(
                By.xpath("//*[contains(text(), 'An internal error has occurred')]"),
            );

            if (errorElements.length > 0) {
                console.log(
                    '‚ùå Ph√°t hi·ªán l·ªói: An internal error has occurred tr√™n giao di·ªán AI Studio. Th·ª≠ l·∫°i t·ª´ ƒë·∫ßu...',
                );
                await this.safeProcessPrompt(prompt, requestId, callbackUrl, temperature, type);
                return;
            }
            let resultData = null;
            if (['stock', 'news', 'market', 'restructure'].includes(type)) {
                // xoa du lieu trong clipboard
                await this.driver.executeScript('navigator.clipboard.writeText("");');
                console.log('‚úÖ ƒê√£ x√≥a clipboard tr∆∞·ªõc khi l·∫•y k·∫øt qu·∫£');
                console.log('üìã ƒêang l·∫•y k·∫øt qu·∫£ t·ª´ clipboard...');

                let clipboardContent = '';
                let copySuccess = false;

                try {
                    await this.clickCopyToClipboard();
                    await this.sleep(1500); // TƒÉng th·ªùi gian ch·ªù

                    clipboardContent = await this.driver.executeScript('return navigator.clipboard.readText();');
                    console.log('clipboard content');

                    if (clipboardContent && clipboardContent.trim()) {
                        copySuccess = true;
                        console.log('‚úÖ L·∫•y n·ªôi dung t·ª´ clipboard th√†nh c√¥ng');
                    } else {
                        console.log('‚ö†Ô∏è Clipboard v·∫´n tr·ªëng sau khi click Copy');
                    }
                } catch (copyError) {
                    console.log('‚ùå L·ªói khi copy to clipboard:', copyError.message);
                }

                // N·∫øu clipboard th·∫•t b·∫°i, th·ª≠ download file
                if (!copySuccess || !clipboardContent) {
                    console.log('üì• Th·ª≠ l·∫•y k·∫øt qu·∫£ b·∫±ng c√°ch download file...');
                    try {
                        await this.clickDownloadButton();
                        await this.sleep(3000); // Ch·ªù file download
                        const content = await this.readLatestTxtFileAndDelete();
                        console.log('üìÑ ƒê√£ l·∫•y n·ªôi dung t·ª´ file download');
                        clipboardContent = content;
                        copySuccess = true;
                    } catch (downloadError) {
                        console.log('‚ùå L·ªói khi download file:', downloadError.message);
                    }
                }

                // N·∫øu c·∫£ clipboard v√† download ƒë·ªÅu th·∫•t b·∫°i
                if (!copySuccess || !clipboardContent) {
                    throw new Error('‚ùå Kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£ t·ª´ clipboard ho·∫∑c download, retrying...');
                }

                // Log clipboard content
                console.log(clipboardContent);

                // Extract JSON from string, removing everything outside {}
                const jsonMatch = clipboardContent.match(/\{.*\}/s);
                if (jsonMatch) {
                    clipboardContent = jsonMatch[0];
                } else {
                    // If no {} found, try to remove ``` markers first then search again
                    const cleanedContent = clipboardContent
                        .replace(/```[^`]*```/g, '')
                        .replace(/```/g, '')
                        .trim();
                    const secondMatch = cleanedContent.match(/\{.*\}/s);
                    if (secondMatch) {
                        clipboardContent = secondMatch[0];
                    }
                }

                resultData = clipboardContent;
                console.log('üìã ƒê√£ x·ª≠ l√Ω n·ªôi dung th√†nh c√¥ng');

                // x·ª≠ l√Ω result data, tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng json string, lo·∫°i b·ªè c√°c ph·∫ßn t·ª≠ n·∫±m ngo√†i {}
                if (typeof resultData === 'string') {
                    try {
                        const jsonData = JSON.parse(resultData);
                        resultData = JSON.stringify(jsonData);
                    } catch (error) {
                        console.log('‚ö†Ô∏è N·ªôi dung kh√¥ng ph·∫£i JSON h·ª£p l·ªá, gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng string');
                    }
                }
            }
            else {
                const contentBlocks = await this.driver.findElements(By.css('.markdown, .chat-turn-container'));
                if (contentBlocks.length === 0) {
                    throw new Error('‚ùå Kh√¥ng t√¨m th·∫•y kh·ªëi k·∫øt qu·∫£ t·ª´ AI');
                }

                const finalBlock = contentBlocks[contentBlocks.length - 1];
                resultData = await finalBlock.getText();
                resultData = resultData.trim();


            }

            console.log('result data');
            console.log(resultData);
            console.log('end result data');

            const resultPayload = {
                request_id: requestId,
                status: 'completed',
                result_data: resultData,
            };

            console.log('üì° G·ª≠i k·∫øt qu·∫£ v·ªÅ server callback');
            await axios.post(callbackUrl, resultPayload);
        } catch (error) {
            console.log('‚ùå L·ªói x·ª≠ l√Ω:');
            console.error(error);
            throw error;
        }
    }

    async safeProcessPrompt(prompt, requestId, callbackUrl, temperature, type, maxRetries = 3) {
        // tr∆∞·ªõc khi x·ª≠ l√Ω, g·ª≠i callback v·ªÅ cho server ƒë·ªÉ th√¥ng b√°o ƒëang x·ª≠ l√Ω
        const resultPayload = {
            request_id: requestId,
            status: 'processing',
            result_data: '',
        };

        console.log('üì° G·ª≠i k·∫øt qu·∫£ v·ªÅ server b√°o b·∫Øt ƒë·∫ßu x·ª≠ l√Ω.');
        await axios.post(callbackUrl, resultPayload);

        let retryCount = 0;

        while (retryCount < maxRetries) {
            try {
                const chromeAlive = await this.checkChromeStatus();

                if (!chromeAlive) {
                    console.log('‚ö†Ô∏è Chrome ƒë√£ ch·∫øt ‚Üí kh·ªüi ƒë·ªông l·∫°i');
                    try {
                        if (this.driver) {
                            await this.driver.quit();
                        }
                    } catch (error) {
                        // Ignore quit errors
                    }
                    await this.initializeDriver();
                } else {
                    console.log('‚úÖ Chrome v·∫´n ƒëang ch·∫°y ‚Üí refresh');
                }

                await this.processPrompt(prompt, requestId, callbackUrl, temperature, type);
                return;
            } catch (error) {
                retryCount++;
                console.log(`‚ùå L·ªói l·∫ßn ${retryCount}: ${error.message}`);
                console.error(error);
                await this.sleep(3000);
            }
        }

        console.log(`‚ùå Th·∫•t b·∫°i sau ${maxRetries} l·∫ßn th·ª≠`);
        await this.notifyError(callbackUrl, requestId, 'fail after 3 times');
    }

    async sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }

    async quit() {
        if (this.driver) {
            await this.driver.quit();
        }

        // Don't clean up the profile directory since we want to reuse it
        // The profile will be preserved for the next run
        console.log('‚úÖ Chrome driver closed, profile preserved for next run');
    }
}

module.exports = AiStudioWorker;
